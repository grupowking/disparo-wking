// ====================================================================
//  Via B√∫zios ‚Äì Disparo ‚ÄúModo F√™nix‚Äù com Auto-Recupera√ß√£o
// ====================================================================
const wppconnect = require('@wppconnect-team/wppconnect');
const fs         = require('fs');
const csv        = require('csv-parser');

// --- CONFIGURA√á√ïES ---
const INTERVALO_MIN = 70_000;
const INTERVALO_MAX = 140_000;
const RESPOSTA_DELAY_MIN = 15_000;
const RESPOSTA_DELAY_MAX = 30_000;
const VIDEO_DELAY_MIN    = 10_000;
const VIDEO_DELAY_MAX    = 20_000;
const SESSAO       = 'VBConcept';
const VIDEO_PATH   = './cupom.mp4';

// --- CONFIGURA√á√ïES DE ROBUSTEZ ---
const MAX_RETRIES_MASSA = 3;
const MAX_RETRIES_RESPOSTA = 2;
const RETRY_DELAY_RESPOSTA = 25_000;
const RESTART_DELAY = 60_000; // Pausa de 1 minuto antes de tentar reiniciar a sess√£o

// --- DEFINI√á√ïES DE TEMPLATES E RESPOSTAS ---
const TEMPLATES_INICIAIS = [ `üéÅ {primeiro}, adivinha? Liberamos um lote de 50 cupons com uma surpresa especial pra voc√™ aqui na Via B√∫zios üòç\n\nPreparada pros nossos clientes fi√©is! Responde ‚Äúquero meu presente‚Äù pra garantir o seu antes que acabe! üëÄ`, `üéâ Hey {primeiro}! Pintou um mimo exclusivo pra quem √© VIP na Via B√∫zios, mas corre que √© limitado! üß°\n\nQuer descobrir o que √©? Manda ‚Äúquero meu presente‚Äù pra reservar o seu! üòâ`, `üôå {primeiro}! Surpresa chegando‚Ä¶ Liberamos um lote √∫nico de 50 cupons s√≥ pra quem √© da casa üòç\n\nDigita ‚Äúquero meu presente‚Äù pra eu liberar o seu!`, `ü•≥ {primeiro}, preparamos algo que √© a sua cara, mas s√£o s√≥ 50 unidades!\n\nPra saber e garantir o seu, me responde ‚Äúquero meu presente‚Äù e pronto üëÄ`, `üëã Oi, {primeiro}! Passando pra avisar que separamos um presente pra voc√™, mas seja r√°pido(a), s√£o s√≥ para os 50 primeiros! ‚ú®\n\nCurioso(a)? Manda um ‚Äúquero meu presente‚Äù aqui!`, `‚ú® {primeiro}, seu dia vai ficar melhor! Temos um benef√≠cio exclusivo te esperando na Via B√∫zios, mas o lote √© limitado.\n\n√â s√≥ responder ‚Äúquero meu presente‚Äù que eu guardo um pra voc√™!`, `Ei, {primeiro}! ü§´ Temos um segredinho que vale um presente... mas s√£o apenas 50 cupons!\n\nSe quiser garantir o seu, j√° sabe, n√©? ‚Äúquero meu presente‚Äù üëá`, `üß° {primeiro}, seu nome foi selecionado para algo especial que preparamos na Via B√∫zios! Corra, pois a oferta √© limitada aos 50 primeiros.\n\nN√£o fica de fora! Me manda ‚Äúquero meu presente‚Äù pra desbloquear.`, `Sabe quem lembrou de voc√™ hoje, {primeiro}? A gente! E com um presente limitado. üéÅ\n\nPra receber, √© f√°cil: responde ‚Äúquero meu presente‚Äù antes que esgote.`, `Ol√° {primeiro}! Que tal uma surpresa pra alegrar sua semana? A Via B√∫zios preparou uma, mas s√£o s√≥ 50 cupons! üíñ\n\nBasta responder ‚Äúquero meu presente‚Äù pra descobrir e garantir o seu!` ];
const TEMPLATES_RESPOSTA = [ `Ufa, na hora! Voc√™ garantiu o cupom de n√∫mero {contador} de 50! ü•≥\n\nVoc√™ desbloqueou 15% OFF pra usar nas lojas Via B√∫zios at√© 15/08. Corre pra usar antes que os outros resgatem tudo!\n\n√â s√≥ mostrar esse cupom no caixa, combinado? üß°`, `Show, {primeiro}! Voc√™ √© o cliente N¬∫ {contador} a garantir o seu. Restam poucos! Aqui est√° sua surpresa: 15% DE DESCONTO ü•≥\n\nV√°lido em qualquer loja Via B√∫zios at√© 15/08. Apresente este cupom e aproveite!`, `Conseguimos! ‚ú® Seu cupom √© o de n√∫mero {contador} e foi ativado. Se eu fosse voc√™, j√° corria pra loja!\n\nUse e abuse nas lojas Via B√∫zios at√© o dia 15/08. Boas compras!`, `Miss√£o cumprida, {primeiro}! üéÅ Voc√™ garantiu o cupom de n√∫mero {contador}. Agora √© correr!\n\nEle √© v√°lido at√© 15/08 em todas as nossas lojas. √â s√≥ mostrar no caixa!` ];
const RESPOSTAS_OK = [ 'quero meu presente', 'quero o presente', 'quero a surpresa', 'quero minha surpresa', 'quero surpresa', 'meu presente', 'cade meu presente', 'kd meu presente', 'me da o presente', 'manda o presente', 'manda a surpresa' ];

// --- UTILIT√ÅRIOS ---
const rnd = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const delay = (ms) => new Promise(r => setTimeout(r, ms));
function dentroDoHorario() { const d = new Date(); const dia = d.getDay(); const h = d.getHours(); if (dia === 0) return h >= 9 && h < 14; if (dia >= 1 && dia <= 6) return h >= 9 && h < 20; return false; }

// ======================= SISTEMA DE FILA E ESTADO GLOBAL =======================
// A fila agora √© global para sobreviver aos rein√≠cios
let messageQueue = [];
let queueIsRunning = false;
let isFirstRun = true; // Flag para popular a fila apenas na primeira execu√ß√£o

// ======================= PROCESSADOR DE FILA (SEM ALTERA√á√ïES SIGNIFICATIVAS) =======================
async function startQueueProcessor(client) {
    if (queueIsRunning) return;
    queueIsRunning = true;
    console.log('[FILA] Iniciando o processador de fila...');

    while (messageQueue.length > 0) {
        if (!client || !client.isConnected) {
            console.error('[FILA] üö® Cliente desconectado! Pausando o processador.');
            queueIsRunning = false;
            return; // Sai da fun√ß√£o se o cliente morrer
        }
        const job = messageQueue.shift();
        try {
            // ... (l√≥gica de processamento do job id√™ntica √† vers√£o anterior)
            if (!dentroDoHorario() && job.isMassMessage) {
                console.log(`[FILA] ‚è∞ Fora do hor√°rio. Devolvendo job para o fim da fila.`);
                messageQueue.push(job);
                await delay(600_000);
                continue;
            }
            console.log(`\n[FILA] Processando job do tipo "${job.type}" para ${job.logInfo}...`);
            await client.startTyping(job.to);
            await delay(job.humanDelay);
            if (job.type === 'text') {
                await client.sendText(job.to, job.content);
            } else if (job.type === 'file') {
                await client.sendFile(job.to, job.path, job.filename, job.caption);
            }
            console.log(`[FILA] ‚úÖ Job para ${job.logInfo} conclu√≠do com sucesso.`);
        } catch (e) {
            // A l√≥gica de retentativa para "Chat not found" permanece a mesma
            job.retryCount = (job.retryCount || 0) + 1;
            const isChatNotFound = e.message && e.message.includes('Chat not found');
            const isFatalError = !isChatNotFound; // Considera qualquer outro erro como potencialmente fatal para o job

            if (isChatNotFound) {
                // L√≥gica para DISPARO EM MASSA
                if (job.isMassMessage && job.retryCount < MAX_RETRIES_MASSA) {
                    console.log(`[FILA] üü° Falha "Chat not found" (Tentativa ${job.retryCount}/${MAX_RETRIES_MASSA}). Devolvendo para o FIM da fila.`);
                    messageQueue.push(job);
                }
                // L√≥gica para RESPOSTA INTERATIVA
                else if (!job.isMassMessage && job.retryCount < MAX_RETRIES_RESPOSTA) {
                    console.log(`[FILA] üü° Falha "Chat not found" em resposta (Tentativa ${job.retryCount}/${MAX_RETRIES_RESPOSTA}). Tentando novamente em ${RETRY_DELAY_RESPOSTA / 1000}s...`);
                    messageQueue.unshift(job);
                    await delay(RETRY_DELAY_RESPOSTA);
                } else {
                    console.log(`[FILA] ‚ùå Falha definitiva para ${job.logInfo} ap√≥s m√∫ltiplas tentativas. Job descartado.`);
                }
            } else {
                // Se o erro for fatal para a sess√£o (ex: detached frame), o catch principal vai pegar.
                // Este else descarta o JOB, mas n√£o para o bot.
                console.error(`[FILA] ‚ùå Erro n√£o recuper√°vel para este JOB: ${e.message}. Job ${job.logInfo} descartado.`);
            }
        } finally {
            try { await client.stopTyping(job.to); } catch (e) {}
            await delay(1000);
        }
    }
    queueIsRunning = false;
    console.log('[FILA] Fila vazia. Processador em modo de espera.');
}

// ======================= FUN√á√ÉO PRINCIPAL E L√ìGICA DE AUTO-RECUPERA√á√ÉO =======================
async function iniciar() {
    let client;
    try {
        console.log('üöÄ Tentando iniciar uma nova sess√£o do wppconnect...');
        client = await wppconnect.create({
            session: SESSAO,
            tokenStore: 'file',
            autoClose: 0,
            headless: true,
            puppeteerOptions: {
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu',
                    '--single-process' // Adicionado para tentar reduzir o uso de mem√≥ria
                ]
            },
            catchQR: (base64Qr, asciiQR) => {
                console.log(asciiQR);
                console.log('BASE64:', base64Qr);
            },
        });

        console.log('üîå Conectado. Escutando mensagens...');

        client.onMessage(async (msg) => {
            if (!msg.from || !msg.body) return;
            const txt = msg.body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').trim();
            if (RESPOSTAS_OK.some(pat => txt.includes(pat))) {
                console.log(`\n[CLIENTE] ${msg.from} pediu o cupom. Adicionando √† FRENTE da fila...`);
                const contatoInfo = await client.getContact(msg.from);
                const primeiroNome = contatoInfo.pushname ? contatoInfo.pushname.split(' ')[0] : 'Cliente';
                const numeroCupom = rnd(35, 48);
                const respostaCupom = TEMPLATES_RESPOSTA[rnd(0, TEMPLATES_RESPOSTA.length - 1)].replace('{primeiro}', primeiroNome).replace('{contador}', numeroCupom);
                
                messageQueue.unshift({ type: 'file', to: msg.from, path: VIDEO_PATH, filename: 'cupom.mp4', caption: 'üéÅ Aproveite!', humanDelay: rnd(VIDEO_DELAY_MIN, VIDEO_DELAY_MAX), logInfo: `resposta de v√≠deo para ${primeiroNome}`, isMassMessage: false, retryCount: 0 });
                messageQueue.unshift({ type: 'text', to: msg.from, content: respostaCupom, humanDelay: rnd(RESPOSTA_DELAY_MIN, RESPOSTA_DELAY_MAX), logInfo: `resposta de texto para ${primeiroNome}`, isMassMessage: false, retryCount: 0 });
                
                startQueueProcessor(client);
            }
        });
        
        // Se a fila n√£o estiver vazia (sobreviveu a um crash), apenas reinicia o processador
        if (messageQueue.length > 0) {
            console.log(`[SISTEMA] Reiniciando processador com ${messageQueue.length} jobs restantes na fila.`);
            startQueueProcessor(client);
        }

    } catch (err) {
        console.error('üí• Erro CR√çTICO na sess√£o do wppconnect:', err.message);
        if (client) {
            try {
                await client.close();
            } catch (closeErr) {
                console.error('Erro ao tentar fechar cliente ap√≥s falha:', closeErr.message);
            }
        }
        console.log(`[SISTEMA] A sess√£o quebrou. Tentando reiniciar em ${RESTART_DELAY / 1000} segundos...`);
        await delay(RESTART_DELAY);
        // Chama a si mesma para tentar recome√ßar do zero
        iniciar(); 
    }
}

// --- PONTO DE ENTRADA ---
// L√™ o CSV apenas uma vez e depois inicia o loop do bot
fs.createReadStream('contatos.csv')
  .pipe(csv({ separator: ';', mapHeaders: ({ header }) => header.trim() }))
  .on('data', (row) => {
    const nomeRaw = row['nome'] || row['\uFEFFnome'] || '';
    const numeroRaw = row['numero'] || '';
    if (!nomeRaw || !numeroRaw) return;
    const nomeLimpo = nomeRaw.trim();
    const numLimpo = numeroRaw.toString().replace(/\D/g, '');
    if (numLimpo.length < 10) return;
    messageQueue.push({
        type: 'text',
        to: `55${numLimpo}@c.us`,
        content: TEMPLATES_INICIAIS[rnd(0, TEMPLATES_INICIAIS.length - 1)].replace('{primeiro}', nomeLimpo.split(' ')[0]),
        humanDelay: rnd(INTERVALO_MIN, INTERVALO_MAX),
        logInfo: `disparo para ${nomeLimpo}`,
        isMassMessage: true,
        retryCount: 0
    });
  })
  .on('end', () => {
    console.log(`‚úÖ CSV lido. ${messageQueue.length} contatos adicionados √† fila.`);
    // Inicia o bot pela primeira vez
    iniciar();
  });
