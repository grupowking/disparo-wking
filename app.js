// ====================================================================
//  Via B√∫zios ‚Äì Disparo ‚ÄúVers√£o Definitiva e Completa‚Äù
//  Arquitetura: Fila de Prioridade + Login Base64 para Servidor
// ====================================================================
const wppconnect = require('@wppconnect-team/wppconnect');
const fs         = require('fs');
const csv        = require('csv-parser');

// --------------------------------------------------------------------
// CONFIGURA√á√ïES
// --------------------------------------------------------------------
const INTERVALO_MIN = 70_000;
const INTERVALO_MAX = 140_000;
const TYPING_MIN    = 3_000;
const TYPING_MAX    = 6_000;

const RESPOSTA_DELAY_MIN = 15_000; // Reduzido para uma resposta mais r√°pida
const RESPOSTA_DELAY_MAX = 30_000;
const VIDEO_DELAY_MIN    = 10_000;
const VIDEO_DELAY_MAX    = 20_000;

const SESSAO       = 'VBConcept';
const VIDEO_PATH   = './cupom.mp4';

const TEMPLATES_INICIAIS = [
  `üéÅ {primeiro}, adivinha? Liberamos um lote de 50 cupons com uma surpresa especial pra voc√™ aqui na Via B√∫zios üòç\n\nPreparada pros nossos clientes fi√©is! Responde ‚Äúquero meu presente‚Äù pra garantir o seu antes que acabe! üëÄ`,
  `üéâ Hey {primeiro}! Pintou um mimo exclusivo pra quem √© VIP na Via B√∫zios, mas corre que √© limitado! üß°\n\nQuer descobrir o que √©? Manda ‚Äúquero meu presente‚Äù pra reservar o seu! üòâ`,
  `üôå {primeiro}! Surpresa chegando‚Ä¶ Liberamos um lote √∫nico de 50 cupons s√≥ pra quem √© da casa üòç\n\nDigita ‚Äúquero meu presente‚Äù pra eu liberar o seu!`,
  `ü•≥ {primeiro}, preparamos algo que √© a sua cara, mas s√£o s√≥ 50 unidades!\n\nPra saber e garantir o seu, me responde ‚Äúquero meu presente‚Äù e pronto üëÄ`,
  `üëã Oi, {primeiro}! Passando pra avisar que separamos um presente pra voc√™, mas seja r√°pido(a), s√£o s√≥ para os 50 primeiros! ‚ú®\n\nCurioso(a)? Manda um ‚Äúquero meu presente‚Äù aqui!`,
  `‚ú® {primeiro}, seu dia vai ficar melhor! Temos um benef√≠cio exclusivo te esperando na Via B√∫zios, mas o lote √© limitado.\n\n√â s√≥ responder ‚Äúquero meu presente‚Äù que eu guardo um pra voc√™!`,
  `Ei, {primeiro}! ü§´ Temos um segredinho que vale um presente... mas s√£o apenas 50 cupons!\n\nSe quiser garantir o seu, j√° sabe, n√©? ‚Äúquero meu presente‚Äù üëá`,
  `üß° {primeiro}, seu nome foi selecionado para algo especial que preparamos na Via B√∫zios! Corra, pois a oferta √© limitada aos 50 primeiros.\n\nN√£o fica de fora! Me manda ‚Äúquero meu presente‚Äù pra desbloquear.`,
  `Sabe quem lembrou de voc√™ hoje, {primeiro}? A gente! E com um presente limitado. üéÅ\n\nPra receber, √© f√°cil: responde ‚Äúquero meu presente‚Äù antes que esgote.`,
  `Ol√° {primeiro}! Que tal uma surpresa pra alegrar sua semana? A Via B√∫zios preparou uma, mas s√£o s√≥ 50 cupons! üíñ\n\nBasta responder ‚Äúquero meu presente‚Äù pra descobrir e garantir o seu!`
];

const TEMPLATES_RESPOSTA = [
    `Ufa, na hora! Voc√™ garantiu o cupom de n√∫mero {contador} de 50! ü•≥\n\nVoc√™ desbloqueou 15% OFF pra usar nas lojas Via B√∫zios at√© 15/08. Corre pra usar antes que os outros resgatem tudo!\n\n√â s√≥ mostrar esse cupom no caixa, combinado? üß°`,
    `Show, {primeiro}! Voc√™ √© o cliente N¬∫ {contador} a garantir o seu. Restam poucos! Aqui est√° sua surpresa: 15% DE DESCONTO ü•≥\n\nV√°lido em qualquer loja Via B√∫zios at√© 15/08. Apresente este cupom e aproveite!`,
    `Conseguimos! ‚ú® Seu cupom √© o de n√∫mero {contador} e foi ativado. Se eu fosse voc√™, j√° corria pra loja!\n\nUse e abuse nas lojas Via B√∫zios at√© o dia 15/08. Boas compras!`,
    `Miss√£o cumprida, {primeiro}! üéÅ Voc√™ garantiu o cupom de n√∫mero {contador}. Agora √© correr!\n\nEle √© v√°lido at√© 15/08 em todas as nossas lojas. √â s√≥ mostrar no caixa!`
];

const RESPOSTAS_OK = [
  'quero meu presente', 'quero o presente', 'quero a surpresa',
  'quero minha surpresa', 'quero surpresa', 'meu presente',
  'cade meu presente', 'kd meu presente', 'me da o presente',
  'manda o presente', 'manda a surpresa'
];

// --------------------------------------------------------------------
// UTILIT√ÅRIOS
// --------------------------------------------------------------------
const rnd = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const delay = (ms) => new Promise(r => setTimeout(r, ms));
function dentroDoHorario() { const d = new Date(); const dia = d.getDay(); const h = d.getHours(); if (dia === 0) return h >= 9 && h < 14; if (dia >= 1 && dia <= 6) return h >= 9 && h < 20; return false; }

// --------------------------------------------------------------------
// LEITURA DO CSV
// --------------------------------------------------------------------
const contatos = [];
fs.createReadStream('contatos.csv').pipe(csv({ separator: ';', mapHeaders: ({ header }) => header.trim() })).on('data', (row) => { const nomeRaw = row['nome'] || ''; const numeroRaw = row['numero'] || ''; if (!nomeRaw || !numeroRaw) return; const nomeLimpo = nomeRaw.trim(); const numLimpo = numeroRaw.toString().replace(/\D/g, ''); if (numLimpo.length < 10) return; contatos.push({ telefone : `55${numLimpo}@c.us`, nomeCompleto : nomeLimpo, primeiroNome : nomeLimpo.split(' ')[0], }); }).on('end', () => { console.log(`‚úÖ CSV lido. ${contatos.length} contatos v√°lidos.`); iniciar(); });

// ======================= SISTEMA DE FILA DE MENSAGENS =======================
const messageQueue = [];
let isSending = false;

async function processQueue(client) {
    if (isSending || messageQueue.length === 0) {
        return;
    }
    isSending = true;
    const job = messageQueue.shift();

    try {
        if (!dentroDoHorario() && job.isMassMessage) {
            console.log(`[FILA] ‚è∞ Fora do hor√°rio para disparo em massa. Adicionando job de volta ao fim da fila.`);
            messageQueue.push(job); // Devolve ao fim da fila
            await delay(600_000); // Espera 10 minutos antes de checar de novo
            isSending = false;
            process.nextTick(() => processQueue(client));
            return;
        }

        console.log(`\n[FILA] Processando job do tipo "${job.type}" para ${job.logInfo}...`);
        
        const initialDelay = job.humanDelay;
        console.log(`[FILA] Aguardando ${initialDelay / 1000}s (simula√ß√£o humana)...`);
        await client.startTyping(job.to);
        await delay(initialDelay);

        if (job.type === 'text') {
            await client.sendText(job.to, job.content);
        } else if (job.type === 'file') {
            await client.sendFile(job.to, job.path, job.filename, job.caption);
        }
        
        console.log(`[FILA] ‚úÖ Job para ${job.logInfo} conclu√≠do com sucesso.`);
    } catch (e) {
        console.error(`[FILA] ‚ùå Job para ${job.logInfo} falhou: ${e.message}`);
        if (e.message && e.message.includes('Chat not found') && (job.retryCount || 0) < 1) {
            console.log(`[FILA] üü° Reagendando job para ${job.logInfo} ap√≥s falha "Chat not found".`);
            job.retryCount = 1;
            messageQueue.unshift(job); // Retentativa com prioridade m√°xima
        }
    } finally {
        try { await client.stopTyping(job.to); } catch (e) {}
        isSending = false;
        process.nextTick(() => processQueue(client));
    }
}
// ====================================================================

async function iniciar() {
  let client;
  try {
    client = await wppconnect.create({
      session: SESSAO,
      tokenStore: 'file',
      autoClose: 0,
      headless: true,
      puppeteerOptions: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-accelerated-2d-canvas', '--no-first-run', '--no-zygote', '--disable-gpu'],
      },
      catchQR: (base64Qr, asciiQR) => {
        console.log('\n\n--------------------------------------------------------------------------------');
        console.log('ATEN√á√ÉO: √â NECESS√ÅRIO ESCANEAR O QR CODE PARA INICIAR A SESS√ÉO');
        console.log('--------------------------------------------------------------------------------\n');
        console.log('Op√ß√£o 1 (TENTATIVA): Tente escanear o c√≥digo ASCII abaixo. Diminua o zoom do navegador se necess√°rio.');
        console.log(asciiQR);
        console.log('\n--------------------------------------------------------------------------------');
        console.log('Op√ß√£o 2 (GARANTIDO): Se o c√≥digo acima n√£o funcionar, siga os passos:');
        console.log('1. Copie TODO o texto que come√ßa com "data:image/png;base64," na linha abaixo.');
        console.log('2. Cole o texto copiado na barra de endere√ßo do seu navegador e aperte Enter.');
        console.log('3. Uma imagem perfeita do QR Code ir√° aparecer. Escaneie-a com seu celular.');
        console.log('\nQR CODE EM BASE64 (copie tudo, incluindo o in√≠cio "data:image/png;base64,"): \n');
        console.log(base64Qr);
        console.log('\n--------------------------------------------------------------------------------');
      },
    });

    console.log('üîå Conectado. Escutando mensagens e pronto para processar a fila.');

    client.onMessage(async (msg) => {
      if (!msg.from || !msg.body) return;
      const txt = msg.body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').trim();
      
      if (RESPOSTAS_OK.some(pat => txt.includes(pat))) {
        console.log(`\n[CLIENTE] ${msg.from} pediu o cupom. Adicionando √† FRENTE da fila...`);
        const contatoInfo = await client.getContact(msg.from);
        const primeiroNome = contatoInfo.pushname ? contatoInfo.pushname.split(' ')[0] : 'Cliente';
        const numeroCupom = rnd(35, 48);
        const respostaCupom = TEMPLATES_RESPOSTA[rnd(0, TEMPLATES_RESPOSTA.length - 1)]
                                  .replace('{primeiro}', primeiroNome)
                                  .replace('{contador}', numeroCupom);
        
        messageQueue.unshift({
            type: 'file',
            to: msg.from,
            path: VIDEO_PATH,
            filename: 'cupom.mp4',
            caption: 'üéÅ Aproveite essa surpresa da Via B√∫zios com carinho!',
            humanDelay: rnd(VIDEO_DELAY_MIN, VIDEO_DELAY_MAX),
            logInfo: `resposta de v√≠deo para ${primeiroNome}`,
            isMassMessage: false // Marcar como n√£o sendo de massa
        });

        messageQueue.unshift({
            type: 'text',
            to: msg.from,
            content: respostaCupom,
            humanDelay: rnd(RESPOSTA_DELAY_MIN, RESPOSTA_DELAY_MAX),
            logInfo: `resposta de texto para ${primeiroNome}`,
            isMassMessage: false // Marcar como n√£o sendo de massa
        });

        processQueue(client);
      }
    });

    console.log('‚è≥ Sess√£o estabilizada. Populando a fila com disparos em massa...');
    
    for (const c of contatos) {
        const txt = TEMPLATES_INICIAIS[rnd(0, TEMPLATES_INICIAIS.length - 1)].replace('{primeiro}', c.primeiroNome);
        messageQueue.push({
            type: 'text',
            to: c.telefone,
            content: txt,
            humanDelay: rnd(INTERVALO_MIN, INTERVALO_MAX),
            logInfo: `disparo para ${c.nomeCompleto}`,
            isMassMessage: true // Marcar como sendo de massa
        });
    }
    console.log(`‚úÖ ${contatos.length} contatos adicionados ao FIM da fila de disparo.`);
    
    processQueue(client);

  } catch (err) {
    console.error('üí• Erro cr√≠tico na inicializa√ß√£o do wppconnect:', err.message);
  }
}
